import { Controller, Post, Get, Body, Param, Res, HttpException, HttpStatus } from '@nestjs/common';
import { Response } from 'express';
import { VietQRPrinterService } from '../../services/vietqr-printer.service';

interface PrintBillRequest {
  id: string;
  cashier: string;
  date: string;
  startTime: string;
  items: Array<{
    name: string;
    qty: number;
    price: number;
  }>;
  total: number;
}

interface VietQRConfigRequest {
  acqId?: number;
  accountNo?: string;
  accountName?: string;
}

interface PrinterConfigRequest {
  type?: 'usb' | 'network';
  device?: string;
  ip?: string;
  port?: number;
}

@Controller('printer/vietqr')
export class VietQRPrinterController {
  constructor(
    private readonly vietQRPrinterService: VietQRPrinterService,
  ) {}

  /**
   * In h√≥a ƒë∆°n v·ªõi VietQR
   * POST /api/printer/vietqr/print-bill
   */
  @Post('print-bill')
  async printBill(@Body() body: PrintBillRequest, @Res() res: Response) {
    try {
      console.log('üìã Nh·∫≠n request in h√≥a ƒë∆°n VietQR:', body);

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!body.id || !body.cashier || !body.items || !body.total) {
        throw new HttpException('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', HttpStatus.BAD_REQUEST);
      }

      // G·ªçi service in h√≥a ƒë∆°n
      const result = await this.vietQRPrinterService.printBill(body);

      if (result.success) {
        res.status(200).json({
          success: true,
          message: result.message,
          timestamp: new Date().toISOString(),
          billId: body.id
        });
      } else {
        res.status(500).json({
          success: false,
          message: result.message,
          timestamp: new Date().toISOString(),
          billId: body.id
        });
      }

    } catch (error) {
      console.error('‚ùå L·ªói trong controller printBill:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi in h√≥a ƒë∆°n: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * In h√≥a ƒë∆°n test
   * GET /api/printer/vietqr/test
   */
  @Get('test')
  async printTestBill(@Res() res: Response) {
    try {
      console.log('üß™ In h√≥a ƒë∆°n test VietQR');

      const result = await this.vietQRPrinterService.printTestBill();

      if (result.success) {
        res.status(200).json({
          success: true,
          message: result.message,
          timestamp: new Date().toISOString(),
          testBill: {
            id: 'HD20251029-001',
            cashier: 'Tri·∫øt',
            date: '29/10/2025',
            startTime: '13:30',
            items: [
              { name: 'C√† ph√™ s·ªØa', qty: 1, price: 20000 },
              { name: 'B√°nh m√¨ th·ªãt', qty: 2, price: 15000 },
              { name: 'N∆∞·ªõc ng·ªçt', qty: 1, price: 10000 }
            ],
            total: 60000
          }
        });
      } else {
        res.status(500).json({
          success: false,
          message: result.message,
          timestamp: new Date().toISOString()
        });
      }

    } catch (error) {
      console.error('‚ùå L·ªói trong controller printTestBill:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi in h√≥a ƒë∆°n test: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR
   * POST /api/printer/vietqr/config/vietqr
   */
  @Post('config/vietqr')
  async updateVietQRConfig(@Body() body: VietQRConfigRequest, @Res() res: Response) {
    try {
      console.log('‚öôÔ∏è C·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR:', body);

      this.vietQRPrinterService.updateVietQRConfig(body);

      res.status(200).json({
        success: true,
        message: 'ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR th√†nh c√¥ng',
        timestamp: new Date().toISOString(),
        config: body
      });

    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in
   * POST /api/printer/vietqr/config/printer
   */
  @Post('config/printer')
  async updatePrinterConfig(@Body() body: PrinterConfigRequest, @Res() res: Response) {
    try {
      console.log('üñ®Ô∏è C·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in:', body);

      this.vietQRPrinterService.updatePrinterConfig(body);

      res.status(200).json({
        success: true,
        message: 'ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in th√†nh c√¥ng',
        timestamp: new Date().toISOString(),
        config: body
      });

    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * L·∫•y th√¥ng tin c·∫•u h√¨nh hi·ªán t·∫°i
   * GET /api/printer/vietqr/config
   */
  @Get('config')
  async getConfig(@Res() res: Response) {
    try {
      console.log('üìã L·∫•y th√¥ng tin c·∫•u h√¨nh VietQR Printer');

      res.status(200).json({
        success: true,
        message: 'L·∫•y c·∫•u h√¨nh th√†nh c√¥ng',
        timestamp: new Date().toISOString(),
        config: {
          vietqr: {
            acqId: 970436,
            accountNo: '0123456789',
            accountName: 'LAU MAM NHA TOI'
          },
          printer: {
            type: 'usb',
            supportedTypes: ['usb', 'network']
          }
        }
      });

    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y c·∫•u h√¨nh:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y c·∫•u h√¨nh: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i m√°y in
   * GET /api/printer/vietqr/status
   */
  @Get('status')
  async getPrinterStatus(@Res() res: Response) {
    try {
      console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i m√°y in VietQR');

      // TODO: Implement actual printer status check
      res.status(200).json({
        success: true,
        message: 'M√°y in VietQR ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
        timestamp: new Date().toISOString(),
        status: {
          connected: true,
          type: 'usb',
          lastPrint: new Date().toISOString(),
          totalPrints: 0 // TODO: Track from database
        }
      });

    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i m√°y in:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i m√°y in: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }
}
