import { Controller, Post, Get, Body, Res } from '@nestjs/common';
import { Response } from 'express';
import { PrintService } from './print.service';
import { TaxConfigService } from '../../services/tax-config.service';

interface PrintBillRequest {
  id: string;
  table?: string;
  time: string;
  items: Array<{
    name: string;
    qty: number;
    price: number;
  }>;
  // Backend s·∫Ω t·ª± t√≠nh subtotal, thu·∫ø v√† total t·ª´ items theo c·∫•u h√¨nh thu·∫ø
}

interface PrintQRRequest {
  amount: number;
  billId: string;
}

@Controller('print')
export class PrintController {
  constructor(
    private readonly printService: PrintService,
    private readonly taxConfigService: TaxConfigService
  ) {}

  /**
   * Render QR thanh to√°n th√†nh HTML ƒë·ªÉ in qua browser
   * POST /api/print/render-qr-html
   */
  @Post('render-qr-html')
  async renderQRHTML(@Body() body: { qrUrl: string; amount: number; billId: string; accountName?: string }, @Res() res: Response) {
    try {
      console.log('üí≥ Nh·∫≠n request render QR HTML:', body);

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!body.qrUrl || !body.amount || !body.billId) {
        return res.status(400).send(`
          <html>
            <body>
              <p>Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: qrUrl, amount ho·∫∑c billId</p>
            </body>
          </html>
        `);
      }

      // Render HTML
      const html = await this.printService.renderQRToHTML(body);

      // Tr·∫£ v·ªÅ HTML
      res.setHeader('Content-Type', 'text/html; charset=utf-8');
      res.status(200).send(html);

    } catch (error) {
      console.error('‚ùå L·ªói trong renderQRHTML:', error);
      
      res.status(500).send(`
        <html>
          <body>
            <p>L·ªói server khi render QR: ${error instanceof Error ? error.message : String(error)}</p>
          </body>
        </html>
      `);
    }
  }

  /**
   * Render h√≥a ƒë∆°n th√†nh HTML ƒë·ªÉ in qua browser
   * POST /api/print/render-bill-html
   */
  @Post('render-bill-html')
  async renderBillHTML(@Body() body: PrintBillRequest, @Res() res: Response) {
    try {
      console.log('üìã Nh·∫≠n request render bill HTML:', body);

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!body.id || !body.time || !body.items || !Array.isArray(body.items) || body.items.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: id, time, v√† items (ph·∫£i c√≥ √≠t nh·∫•t 1 m√≥n)',
          timestamp: new Date().toISOString()
        });
      }

      // T√≠nh thu·∫ø t·ª´ c·∫•u h√¨nh
      const subtotal = body.items.reduce((sum: number, item: any) => {
        const price = typeof item.price === 'string' 
          ? parseFloat(item.price.replace(/[^\d.-]/g, '')) || 0
          : Number(item.price) || 0;
        const qty = typeof item.qty === 'string'
          ? parseInt(item.qty, 10) || 0
          : Number(item.qty) || 0;
        return sum + (price * qty);
      }, 0);

      const taxConfig = await this.taxConfigService.getTaxConfig();
      const taxCalculation = await this.taxConfigService.calculateTax(subtotal);

      // Th√™m th√¥ng tin thu·∫ø v√†o bill
      const billWithTax = {
        ...body,
        subtotal,
        vatAmount: taxCalculation.vatAmount,
        vatRate: taxCalculation.vatRate,
        serviceChargeAmount: taxCalculation.serviceChargeAmount,
        serviceChargeRate: taxCalculation.serviceChargeRate,
        taxName: taxConfig.taxName || 'VAT',
        serviceChargeName: taxConfig.serviceChargeName || 'Ph√≠ ph·ª•c v·ª•'
      };

      // Render HTML
      const html = this.printService.renderBillToHTML(billWithTax);

      // Tr·∫£ v·ªÅ HTML
      res.setHeader('Content-Type', 'text/html; charset=utf-8');
      res.status(200).send(html);

    } catch (error) {
      console.error('‚ùå L·ªói trong renderBillHTML:', error);
      
      res.status(500).send(`
        <html>
          <body>
            <p>L·ªói server khi render h√≥a ƒë∆°n: ${error instanceof Error ? error.message : String(error)}</p>
          </body>
        </html>
      `);
    }
  }

  /**
   * In h√≥a ƒë∆°n thanh to√°n (kh√¥ng QR)
   * POST /api/print/print-bill
   */
  @Post('print-bill')
  async printBill(@Body() body: PrintBillRequest, @Res() res: Response) {
    try {
      console.log('üìã Nh·∫≠n request in h√≥a ƒë∆°n:', body);

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!body.id || !body.time || !body.items || !Array.isArray(body.items) || body.items.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: id, time, v√† items (ph·∫£i c√≥ √≠t nh·∫•t 1 m√≥n)',
          timestamp: new Date().toISOString()
        });
      }

      // G·ªçi service in h√≥a ƒë∆°n
      const result = await this.printService.printBill(body);

      // Always return 200 if service processed (even if printer not available)
      // Service will return success=true with warning message if printer unavailable
      res.status(200).json({
        success: result.success,
        message: result.message,
        timestamp: new Date().toISOString(),
        billId: body.id,
        printed: result.success && !result.message.includes('kh√¥ng kh·∫£ d·ª•ng')
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong controller printBill:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi in h√≥a ƒë∆°n: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * In QR thanh to√°n t·ª´ URL (download v√† in tr·ª±c ti·∫øp qua ESC/POS)
   * POST /api/print/print-qr-from-url
   */
  @Post('print-qr-from-url')
  async printQRFromURL(@Body() body: { qrUrl: string; amount: number; billId: string }, @Res() res: Response) {
    try {
      console.log('üí≥ Nh·∫≠n request in QR t·ª´ URL:', body);

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!body.qrUrl || !body.amount || !body.billId) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin: qrUrl, amount ho·∫∑c billId',
          timestamp: new Date().toISOString()
        });
      }

      // G·ªçi service in QR t·ª´ URL
      const result = await this.printService.printQRFromURL(body);

      // Always return 200 if service processed (even if printer not available)
      res.status(200).json({
        success: result.success,
        message: result.message,
        timestamp: new Date().toISOString(),
        billId: body.billId,
        amount: body.amount,
        printed: result.success && !result.message.includes('kh√¥ng kh·∫£ d·ª•ng')
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong controller printQRFromURL:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi in QR: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * In QR thanh to√°n ri√™ng (VietQR ƒë·ªông) - DEPRECATED: D√πng print-qr-from-url thay th·∫ø
   * POST /api/print/print-qr
   */
  @Post('print-qr')
  async printQR(@Body() body: PrintQRRequest, @Res() res: Response) {
    try {
      console.log('üí≥ Nh·∫≠n request in QR:', body);

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!body.amount || !body.billId) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin amount ho·∫∑c billId',
          timestamp: new Date().toISOString()
        });
      }

      // G·ªçi service in QR
      const result = await this.printService.printPaymentQR(body);

      // Always return 200 if service processed (even if printer not available)
      // Service will return success=true with warning message if printer unavailable
      res.status(200).json({
        success: result.success,
        message: result.message,
        timestamp: new Date().toISOString(),
        billId: body.billId,
        amount: body.amount,
        printed: result.success && !result.message.includes('kh√¥ng kh·∫£ d·ª•ng')
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong controller printQR:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi in QR: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Test in h√≥a ƒë∆°n m·∫´u
   * POST /api/print/test-bill
   */
  @Post('test-bill')
  async testBill(@Res() res: Response) {
    try {
      const testBill = {
        id: 'HD20251029-001',
        table: 'B√†n 1',
        time: new Date().toLocaleTimeString('vi-VN'),
        items: [
          { name: 'C√† ph√™ s·ªØa', qty: 1, price: 20000 },
          { name: 'B√°nh m√¨ th·ªãt', qty: 2, price: 15000 },
          { name: 'N∆∞·ªõc ng·ªçt', qty: 1, price: 10000 }
        ]
        // Backend s·∫Ω t·ª± t√≠nh thu·∫ø t·ª´ c·∫•u h√¨nh
      };

      const result = await this.printService.printBill(testBill);

      res.status(200).json({
        success: result.success,
        message: result.message,
        timestamp: new Date().toISOString(),
        testBill
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong testBill:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi test in h√≥a ƒë∆°n: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Test in QR m·∫´u
   * POST /api/print/test-qr
   */
  @Post('test-qr')
  async testQR(@Res() res: Response) {
    try {
      const testQR = {
        amount: 50000,
        billId: 'HD20251029-001'
      };

      const result = await this.printService.printPaymentQR(testQR);

      res.status(200).json({
        success: result.success,
        message: result.message,
        timestamp: new Date().toISOString(),
        testQR
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong testQR:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi test in QR: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * L·∫•y c·∫•u h√¨nh thu·∫ø hi·ªán t·∫°i
   * GET /api/print/tax-config
   */
  @Get('tax-config')
  async getTaxConfig(@Res() res: Response) {
    try {
      const taxConfig = await this.taxConfigService.getTaxConfig();
      
      res.status(200).json({
        success: true,
        taxConfig,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå L·ªói trong getTaxConfig:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y c·∫•u h√¨nh thu·∫ø: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh thu·∫ø
   * POST /api/print/tax-config
   */
  @Post('tax-config')
  async updateTaxConfig(@Body() body: any, @Res() res: Response) {
    try {
      console.log('üìù Nh·∫≠n request c·∫≠p nh·∫≠t c·∫•u h√¨nh thu·∫ø:', body);

      const updatedConfig = await this.taxConfigService.updateTaxConfig(body);

      res.status(200).json({
        success: true,
        message: 'C·∫•u h√¨nh thu·∫ø ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!',
        taxConfig: updatedConfig,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå L·ªói trong updateTaxConfig:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh thu·∫ø: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * L·∫•y c·∫•u h√¨nh m√°y in
   * GET /api/print/printer-config
   */
  @Get('printer-config')
  async getPrinterConfig(@Res() res: Response) {
    try {
      const config = await this.printService.getPrinterConfig();
      
      res.status(200).json({
        success: true,
        printerConfig: config,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå L·ªói trong getPrinterConfig:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y c·∫•u h√¨nh m√°y in: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in
   * POST /api/print/printer-config
   */
  @Post('printer-config')
  async updatePrinterConfig(@Body() body: any, @Res() res: Response) {
    try {
      console.log('üìù Nh·∫≠n request c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in:', body);

      await this.printService.updatePrinterConfig(body);

      res.status(200).json({
        success: true,
        message: 'C·∫•u h√¨nh m√°y in ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå L·ªói trong updatePrinterConfig:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * L·∫•y c·∫•u h√¨nh VietQR
   * GET /api/print/vietqr-config
   */
  @Get('vietqr-config')
  async getVietQRConfig(@Res() res: Response) {
    try {
      const config = await this.printService.getVietQRConfig();
      
      res.status(200).json({
        success: true,
        vietQRConfig: config,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå L·ªói trong getVietQRConfig:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y c·∫•u h√¨nh VietQR: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR
   * POST /api/print/vietqr-config
   */
  @Post('vietqr-config')
  async updateVietQRConfig(@Body() body: any, @Res() res: Response) {
    try {
      console.log('üìù Nh·∫≠n request c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR:', body);

      await this.printService.updateVietQRConfig(body);

      res.status(200).json({
        success: true,
        message: 'C·∫•u h√¨nh VietQR ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå L·ªói trong updateVietQRConfig:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * T√≠nh thu·∫ø v√† tr·∫£ v·ªÅ cho frontend hi·ªÉn th·ªã
   * POST /api/print/calculate-tax
   */
  @Post('calculate-tax')
  async calculateTax(@Body() body: { subtotal: number }, @Res() res: Response) {
    try {
      console.log('üí∞ T√≠nh thu·∫ø cho subtotal:', body.subtotal);

      if (!body.subtotal || body.subtotal < 0) {
        return res.status(400).json({
          success: false,
          message: 'Subtotal ph·∫£i l√† s·ªë d∆∞∆°ng',
          timestamp: new Date().toISOString()
        });
      }

      // T√≠nh thu·∫ø t·ª´ TaxConfigService
      const taxConfig = await this.taxConfigService.getTaxConfig();
      const taxCalculation = await this.taxConfigService.calculateTax(body.subtotal);

      res.status(200).json({
        success: true,
        taxCalculation: {
          subtotal: taxCalculation.subtotal,
          vatAmount: taxCalculation.vatAmount,
          serviceChargeAmount: taxCalculation.serviceChargeAmount,
          total: taxCalculation.total,
          vatRate: taxCalculation.vatRate,
          serviceChargeRate: taxCalculation.serviceChargeRate,
          vatEnabled: taxCalculation.vatEnabled,
          serviceChargeEnabled: taxCalculation.serviceChargeEnabled,
          taxName: taxConfig.taxName || 'VAT',
          serviceChargeName: taxConfig.serviceChargeName || 'Ph√≠ ph·ª•c v·ª•'
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong calculateTax:', error);
      
      res.status(500).json({
        success: false,
        message: 'L·ªói khi t√≠nh thu·∫ø: ' + (error instanceof Error ? error.message : String(error)),
        timestamp: new Date().toISOString()
      });
    }
  }
}
