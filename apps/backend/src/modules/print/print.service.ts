import { Injectable } from '@nestjs/common';
import * as escpos from 'escpos';
import * as escposUSB from 'escpos-usb';
import axios from 'axios';
import { TaxConfigService } from '../../services/tax-config.service';

// C·∫•u h√¨nh m√°y in
interface PrinterConfig {
  type: 'usb' | 'network';
  ip?: string;
  port?: number;
}

// C·∫•u h√¨nh VietQR
interface VietQRConfig {
  acqId: number;
  accountNo: string;
  accountName: string;
}

@Injectable()
export class PrintService {
  private readonly printerConfig: PrinterConfig = {
    type: 'usb', // ho·∫∑c 'network'
    ip: '192.168.1.100', // IP m√°y in LAN
    port: 9100
  };

  private readonly vietQRConfig: VietQRConfig = {
    acqId: 970436, // Vietcombank
    accountNo: '0123456789',
    accountName: 'LAU MAM NHA TOI'
  };

  constructor(private readonly taxConfigService: TaxConfigService) {
    // C·∫•u h√¨nh escpos-usb
    escpos.USB = escposUSB;
  }

  /**
   * In h√≥a ƒë∆°n thanh to√°n (kh√¥ng QR)
   */
  async printBill(bill: any): Promise<{ success: boolean; message: string }> {
    try {
      console.log('üßæ In h√≥a ƒë∆°n thanh to√°n:', bill);

      // T√≠nh t·ªïng ti·ªÅn t·ª´ items
      const subtotal = bill.items.reduce((sum: number, item: any) => {
        return sum + (item.price * item.qty);
      }, 0);

      // L·∫•y c·∫•u h√¨nh thu·∫ø v√† t√≠nh thu·∫ø
      const taxConfig = await this.taxConfigService.getTaxConfig();
      const taxCalculation = await this.taxConfigService.calculateTax(subtotal);

      console.log('üí∞ Th√¥ng tin thu·∫ø:', {
        subtotal,
        vatAmount: taxCalculation.vatAmount,
        serviceChargeAmount: taxCalculation.serviceChargeAmount,
        total: taxCalculation.total,
        vatRate: taxCalculation.vatRate,
        vatEnabled: taxCalculation.vatEnabled,
        serviceChargeEnabled: taxCalculation.serviceChargeEnabled
      });

      const device = this.createPrinterDevice();
      const printer = new escpos.Printer(device);

      return new Promise((resolve, reject) => {
        device.open((error: any) => {
          if (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi m√°y in:', error);
            reject({ success: false, message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y in: ' + error.message });
            return;
          }

          try {
            printer
              // HEADER
              .align('ct').style('b').size(1, 1).text('NH√Ä T√îI RESTAURANT')
              .size(0, 0).text('H√ìA ƒê∆†N THANH TO√ÅN')
              .text('C·∫£m ∆°n qu√Ω kh√°ch!')
              .text('--------------------------------')
              
              // INFO
              .align('lt')
              .text(`S·ªë ƒë∆°n: ${bill.id}`)
              .text(`B√†n: ${bill.table || 'T·∫°i qu·∫ßy'}`)
              .text(`Th·ªùi gian: ${bill.time}`)
              .text('--------------------------------')
              
              // ITEMS
              .style('b').text('STT  M√≥n ƒÉn                SL   Gi√°').style('normal');

            bill.items.forEach((item: any, i: number) => {
              const itemTotal = item.price * item.qty;
              printer.text(
                `${(i + 1).toString().padEnd(3)} ${item.name.padEnd(18)} ${item.qty.toString().padEnd(3)} ${itemTotal.toLocaleString().padStart(8)}`
              );
            });

            printer.text('--------------------------------');

            // T·∫°m t√≠nh
            printer
              .align('rt')
              .style('normal')
              .text(`T·∫°m t√≠nh: ${subtotal.toLocaleString()} ƒë`);

            // Thu·∫ø VAT
            if (taxCalculation.vatEnabled && taxCalculation.vatAmount > 0) {
              printer
                .align('rt')
                .text(`${taxConfig.taxName || 'VAT'} (${taxCalculation.vatRate}%): ${taxCalculation.vatAmount.toLocaleString()} ƒë`);
            }

            // Ph√≠ ph·ª•c v·ª•
            if (taxCalculation.serviceChargeEnabled && taxCalculation.serviceChargeAmount > 0) {
              printer
                .align('rt')
                .text(`${taxConfig.serviceChargeName || 'Ph√≠ ph·ª•c v·ª•'} (${taxCalculation.serviceChargeRate}%): ${taxCalculation.serviceChargeAmount.toLocaleString()} ƒë`);
            }

            // T·ªïng c·ªông
            printer
              .align('rt')
              .style('b')
              .text(`T·ªïng c·ªông: ${taxCalculation.total.toLocaleString()} ƒë`)
              .style('normal')
              .feed(1)
              
              // FOOTER
              .align('ct')
              .text('699 Ph·∫°m H·ªØu L·∫ßu, Cao L√£nh, ƒê·ªìng Th√°p')
              .text('Wifi: nhatoi2025')
              .text('H·∫πn g·∫∑p l·∫°i qu√Ω kh√°ch!')
              .feed(2)
              .cut()
              .close();

            console.log('‚úÖ In h√≥a ƒë∆°n th√†nh c√¥ng');
            resolve({ success: true, message: 'H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c in th√†nh c√¥ng!' });

          } catch (printError) {
            console.error('‚ùå L·ªói khi in:', printError);
            reject({ success: false, message: 'L·ªói khi in h√≥a ƒë∆°n: ' + printError.message });
          }
        });
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong printBill:', error);
      return { success: false, message: 'L·ªói h·ªá th·ªëng: ' + (error instanceof Error ? error.message : String(error)) };
    }
  }

  /**
   * In QR thanh to√°n ri√™ng (VietQR ƒë·ªông)
   */
  async printPaymentQR(data: { amount: number; billId: string }): Promise<{ success: boolean; message: string }> {
    try {
      console.log('üí≥ In QR thanh to√°n:', data);

      const { amount, billId } = data;
      const addInfo = `HD${billId}`;
      
      // T·∫°o URL VietQR
      const qrUrl = `https://img.vietqr.io/image/${this.vietQRConfig.acqId}-${this.vietQRConfig.accountNo}-compact2.png?amount=${amount}&addInfo=${encodeURIComponent(addInfo)}&accountName=${encodeURIComponent(this.vietQRConfig.accountName)}`;

      console.log('üîó VietQR URL:', qrUrl);

      // T·∫£i QR image
      const res = await axios.get(qrUrl, { responseType: 'arraybuffer' });
      const qrBuffer = Buffer.from(res.data, 'binary');

      const device = this.createPrinterDevice();
      const printer = new escpos.Printer(device);

      return new Promise((resolve, reject) => {
        device.open((error: any) => {
          if (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi m√°y in:', error);
            reject({ success: false, message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y in: ' + error.message });
            return;
          }

          try {
            escpos.Image.load(qrBuffer, (image: any) => {
              printer
                .align('ct').style('b').text('QR THANH TO√ÅN VIETQR').feed(1)
                .raster(image, 'dwdh').feed(1)
                .text(`S·ªë ti·ªÅn: ${amount.toLocaleString()} ƒë`)
                .text(`M√£ h√≥a ƒë∆°n: ${billId}`)
                .text('Qu√©t QR ƒë·ªÉ thanh to√°n').feed(2)
                .cut().close();

              console.log('‚úÖ In QR th√†nh c√¥ng');
              resolve({ success: true, message: 'QR thanh to√°n ƒë√£ ƒë∆∞·ª£c in th√†nh c√¥ng!' });
            });
          } catch (printError) {
            console.error('‚ùå L·ªói khi in QR:', printError);
            reject({ success: false, message: 'L·ªói khi in QR: ' + printError.message });
          }
        });
      });

    } catch (error) {
      console.error('‚ùå L·ªói trong printPaymentQR:', error);
      return { success: false, message: 'L·ªói h·ªá th·ªëng: ' + (error instanceof Error ? error.message : String(error)) };
    }
  }

  /**
   * T·∫°o printer device
   */
  private createPrinterDevice(): any {
    if (this.printerConfig.type === 'usb') {
      return new escpos.USB();
    } else {
      return new escpos.Network(this.printerConfig.ip, this.printerConfig.port);
    }
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in
   */
  updatePrinterConfig(config: Partial<PrinterConfig>): void {
    this.printerConfig.type = config.type ?? this.printerConfig.type;
    this.printerConfig.ip = config.ip ?? this.printerConfig.ip;
    this.printerConfig.port = config.port ?? this.printerConfig.port;
    
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in:', this.printerConfig);
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR
   */
  updateVietQRConfig(config: Partial<VietQRConfig>): void {
    this.vietQRConfig.acqId = config.acqId ?? this.vietQRConfig.acqId;
    this.vietQRConfig.accountNo = config.accountNo ?? this.vietQRConfig.accountNo;
    this.vietQRConfig.accountName = config.accountName ?? this.vietQRConfig.accountName;
    
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR:', this.vietQRConfig);
  }
}
