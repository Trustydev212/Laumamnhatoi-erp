import { Injectable } from '@nestjs/common';
import { PrismaService } from '../common/prisma/prisma.service';
import { ReceiptConfigService } from './receipt-config.service';
import { TaxConfigService } from './tax-config.service';
import axios from 'axios';
import * as escpos from 'escpos';
import * as escposUSB from 'escpos-usb';
import * as fs from 'fs';
import * as path from 'path';
import * as sharp from 'sharp';

// C·∫•u h√¨nh VietQR Bank
interface VietQRConfig {
  acqId: number; // M√£ ng√¢n h√†ng (970436 = Vietcombank)
  accountNo: string;
  accountName: string;
}

// C·∫•u h√¨nh m√°y in
interface PrinterConfig {
  type: 'usb' | 'network';
  device?: string; // USB device path
  ip?: string; // IP address for network printer
  port?: number; // Port for network printer
}

@Injectable()
export class VietQRPrinterService {
  private readonly vietQRConfig: VietQRConfig = {
    acqId: 970436, // Vietcombank
    accountNo: '0123456789', // S·ªë t√†i kho·∫£n th·ª±c t·∫ø
    accountName: 'LAU MAM NHA TOI' // T√™n t√†i kho·∫£n
  };

  private readonly printerConfig: PrinterConfig = {
    type: 'usb', // ho·∫∑c 'network'
    // device: '/dev/usb/lp0', // Linux USB path
    // ip: '192.168.1.100', // IP m√°y in LAN
    // port: 9100
  };

  constructor(
    private prisma: PrismaService,
    private receiptConfigService: ReceiptConfigService,
    private taxConfigService: TaxConfigService,
  ) {
    // C·∫•u h√¨nh escpos-usb
    escpos.USB = escposUSB;
  }

  /**
   * In h√≥a ƒë∆°n v·ªõi VietQR qua Xprinter T80L
   */
  async printBill(billData: any): Promise<{ success: boolean; message: string }> {
    try {
      console.log('üñ®Ô∏è B·∫Øt ƒë·∫ßu in h√≥a ƒë∆°n VietQR:', billData);

      // 1. L·∫•y c·∫•u h√¨nh h√≥a ƒë∆°n v√† thu·∫ø
      const receiptConfig = await this.receiptConfigService.getConfig();
      const taxConfig = await this.taxConfigService.getTaxConfig();

      // 2. T·∫°o m√£ QR VietQR ƒë·ªông
      const qrBuffer = await this.generateVietQRImage(billData);

      // 3. T·∫°o v√† g·ª≠i l·ªánh ESC/POS
      const escposCommands = await this.generateEscposCommands(billData, receiptConfig, taxConfig, qrBuffer);

      // 4. In qua m√°y Xprinter
      await this.sendToPrinter(escposCommands);

      return {
        success: true,
        message: 'H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c in th√†nh c√¥ng v·ªõi VietQR!'
      };

    } catch (error) {
      console.error('‚ùå L·ªói khi in h√≥a ƒë∆°n VietQR:', error);
      return {
        success: false,
        message: 'L·ªói khi in h√≥a ƒë∆°n: ' + (error instanceof Error ? error.message : String(error))
      };
    }
  }

  /**
   * T·∫°o m√£ QR VietQR ƒë·ªông t·ª´ API
   */
  private async generateVietQRImage(billData: any): Promise<Buffer> {
    try {
      const amount = Number(billData.total);
      const addInfo = `HD${billData.id}`;

      // T·∫°o URL VietQR API
      const qrUrl = `https://img.vietqr.io/image/${this.vietQRConfig.acqId}-${this.vietQRConfig.accountNo}-compact2.png?amount=${amount}&addInfo=${encodeURIComponent(addInfo)}&accountName=${encodeURIComponent(this.vietQRConfig.accountName)}`;

      console.log('üîó VietQR URL:', qrUrl);

      // T·∫£i ·∫£nh QR t·ª´ API
      const response = await axios.get(qrUrl, { 
        responseType: 'arraybuffer',
        timeout: 10000 // 10 gi√¢y timeout
      });

      const qrBuffer = Buffer.from(response.data, 'binary');
      console.log('‚úÖ ƒê√£ t·∫£i QR VietQR th√†nh c√¥ng, k√≠ch th∆∞·ªõc:', qrBuffer.length, 'bytes');

      return qrBuffer;

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o QR VietQR:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o m√£ QR VietQR: ' + (error instanceof Error ? error.message : String(error)));
    }
  }

  /**
   * T·∫°o l·ªánh ESC/POS cho m√°y Xprinter T80L
   */
  private async generateEscposCommands(billData: any, receiptConfig: any, taxConfig: any, qrBuffer: Buffer): Promise<Buffer> {
    try {
      // Kh·ªüi t·∫°o printer
      const device = this.printerConfig.type === 'usb' 
        ? new escpos.USB() 
        : new escpos.Network(this.printerConfig.ip, this.printerConfig.port);

      const printer = new escpos.Printer(device);

      // T·∫°o buffer ESC/POS
      let commands = Buffer.from([]);

      // ==== HEADER ====
      commands = Buffer.concat([
        commands,
        Buffer.from('\x1B\x40'), // Initialize printer
        Buffer.from('\x1B\x61\x01'), // Center align
        Buffer.from('\x1B\x45\x01'), // Bold on
        Buffer.from('\x1B\x21\x30'), // Double size
        Buffer.from('L·∫®U M·∫ÆM NH√Ä T√îI\n'),
        Buffer.from('\x1B\x21\x00'), // Normal size
        Buffer.from('H√ìA ƒê∆†N THANH TO√ÅN\n'),
        Buffer.from('\x1B\x45\x00'), // Bold off
        Buffer.from(`M√£ Hƒê: ${billData.id}\n`),
        Buffer.from(`Thu ng√¢n: ${billData.cashier}\n`),
        Buffer.from(`Gi·ªù v√†o: ${billData.startTime} - Ng√†y: ${billData.date}\n`),
        Buffer.from('--------------------------------\n')
      ]);

      // ==== DANH S√ÅCH M√ìN ====
      commands = Buffer.concat([
        commands,
        Buffer.from('\x1B\x61\x00'), // Left align
        Buffer.from('\x1B\x45\x01'), // Bold on
        Buffer.from('STT  T√™n m√≥n             SL   Th√†nh ti·ªÅn\n'),
        Buffer.from('\x1B\x45\x00') // Bold off
      ]);

      // Th√™m t·ª´ng m√≥n ƒÉn
      billData.items.forEach((item: any, index: number) => {
        const stt = (index + 1).toString().padEnd(3);
        const name = item.name.padEnd(18);
        const qty = item.qty.toString().padEnd(3);
        const price = item.price.toLocaleString().padStart(8);
        
        commands = Buffer.concat([
          commands,
          Buffer.from(`${stt} ${name} ${qty} ${price}\n`)
        ]);
      });

      // ==== T·ªîNG TI·ªÄN ====
      commands = Buffer.concat([
        commands,
        Buffer.from('--------------------------------\n'),
        Buffer.from('\x1B\x61\x02'), // Right align
        Buffer.from('\x1B\x45\x01'), // Bold on
        Buffer.from(`T·ªïng c·ªông: ${billData.total.toLocaleString()} ƒë\n`),
        Buffer.from('\x1B\x45\x00'), // Bold off
        Buffer.from('\x1B\x61\x00'), // Left align
        Buffer.from('+ Thanh to√°n qua VietQR\n'),
        Buffer.from('\n')
      ]);

      // ==== QR CODE ====
      const qrBitmap = await this.convertPNGToEscposBitmap(qrBuffer);
      commands = Buffer.concat([
        commands,
        Buffer.from('\x1B\x61\x01'), // Center align
        qrBitmap, // ESC/POS bitmap
        Buffer.from('\n')
      ]);

      // ==== FOOTER ====
      commands = Buffer.concat([
        commands,
        Buffer.from('L·∫®U M·∫ÆM NH√Ä T√îI\n'),
        Buffer.from('699 Ph·∫°m H·ªØu L·∫ßu, Cao L√£nh, ƒê·ªìng Th√°p\n'),
        Buffer.from('C·∫£m ∆°n Qu√Ω kh√°ch!\n'),
        Buffer.from('\n\n'),
        Buffer.from('\x1D\x56\x00'), // Full cut
        Buffer.from('\x0A\x0A\x0A') // Feed paper
      ]);

      console.log('‚úÖ ƒê√£ t·∫°o l·ªánh ESC/POS th√†nh c√¥ng, k√≠ch th∆∞·ªõc:', commands.length, 'bytes');
      return commands;

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o l·ªánh ESC/POS:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o l·ªánh ESC/POS: ' + (error instanceof Error ? error.message : String(error)));
    }
  }

  /**
   * Convert PNG buffer th√†nh ESC/POS bitmap
   */
  private async convertPNGToEscposBitmap(pngBuffer: Buffer): Promise<Buffer> {
    try {
      console.log('üñºÔ∏è Converting PNG to ESC/POS bitmap...');
      
      // S·ª≠ d·ª•ng Sharp ƒë·ªÉ resize v√† convert PNG th√†nh bitmap
      const resizedImage = await sharp(pngBuffer)
        .resize(200, 200, { // Resize QR code v·ªÅ k√≠ch th∆∞·ªõc ph√π h·ª£p
          fit: 'inside',
          withoutEnlargement: true
        })
        .grayscale() // Convert th√†nh grayscale
        .threshold(128) // Threshold ƒë·ªÉ t·∫°o bitmap ƒëen tr·∫Øng
        .raw() // L·∫•y raw data
        .toBuffer();

      // Convert raw data th√†nh ESC/POS bitmap commands
      const escposBitmap = this.rawToEscposBitmap(resizedImage, 200, 200);
      
      console.log('‚úÖ ƒê√£ convert PNG th√†nh ESC/POS bitmap th√†nh c√¥ng');
      return escposBitmap;

    } catch (error) {
      console.error('‚ùå L·ªói khi convert PNG:', error);
      return Buffer.from('');
    }
  }

  /**
   * Convert raw bitmap data th√†nh ESC/POS bitmap commands
   */
  private rawToEscposBitmap(rawData: Buffer, width: number, height: number): Buffer {
    try {
      // ESC/POS bitmap command: GS v 0 m xL xH yL yH d1...dk
      // m = 0 (normal mode), xL xH = width, yL yH = height
      
      const widthBytes = Math.ceil(width / 8); // Convert width to bytes
      const heightBytes = height;
      
      // ESC/POS header
      let bitmapCommand = Buffer.from([
        0x1D, 0x76, 0x30, 0x00, // GS v 0 m
        widthBytes & 0xFF, (widthBytes >> 8) & 0xFF, // xL xH
        heightBytes & 0xFF, (heightBytes >> 8) & 0xFF  // yL yH
      ]);

      // Convert raw data th√†nh bitmap data
      const bitmapData = Buffer.alloc(widthBytes * heightBytes);
      
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < widthBytes; x++) {
          let byte = 0;
          for (let bit = 0; bit < 8; bit++) {
            const pixelX = x * 8 + bit;
            if (pixelX < width) {
              const pixelIndex = y * width + pixelX;
              if (pixelIndex < rawData.length && rawData[pixelIndex] > 128) {
                byte |= (0x80 >> bit); // Set bit to 1 for white pixels
              }
            }
          }
          bitmapData[y * widthBytes + x] = byte;
        }
      }

      return Buffer.concat([bitmapCommand, bitmapData]);

    } catch (error) {
      console.error('‚ùå L·ªói khi convert raw bitmap:', error);
      return Buffer.from('');
    }
  }

  /**
   * G·ª≠i l·ªánh ESC/POS t·ªõi m√°y in
   */
  private async sendToPrinter(commands: Buffer): Promise<void> {
    try {
      console.log('üì§ G·ª≠i l·ªánh t·ªõi m√°y in Xprinter...');

      if (this.printerConfig.type === 'usb') {
        // In qua USB
        const device = new escpos.USB();
        
        device.open((error: any) => {
          if (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi USB:', error);
            throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y in USB: ' + error.message);
          }

          const printer = new escpos.Printer(device);
          printer.raw(commands);
          printer.close();
          
          console.log('‚úÖ ƒê√£ g·ª≠i l·ªánh in qua USB th√†nh c√¥ng');
        });

      } else {
        // In qua LAN
        const device = new escpos.Network(this.printerConfig.ip, this.printerConfig.port);
        
        device.open((error: any) => {
          if (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi LAN:', error);
            throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y in LAN: ' + error.message);
          }

          const printer = new escpos.Printer(device);
          printer.raw(commands);
          printer.close();
          
          console.log('‚úÖ ƒê√£ g·ª≠i l·ªánh in qua LAN th√†nh c√¥ng');
        });
      }

    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i t·ªõi m√°y in:', error);
      throw new Error('Kh√¥ng th·ªÉ g·ª≠i l·ªánh t·ªõi m√°y in: ' + (error instanceof Error ? error.message : String(error)));
    }
  }

  /**
   * Test in h√≥a ƒë∆°n m·∫´u
   */
  async printTestBill(): Promise<{ success: boolean; message: string }> {
    const testBill = {
      id: 'HD20251029-001',
      cashier: 'Tri·∫øt',
      date: '29/10/2025',
      startTime: '13:30',
      items: [
        { name: 'C√† ph√™ s·ªØa', qty: 1, price: 20000 },
        { name: 'B√°nh m√¨ th·ªãt', qty: 2, price: 15000 },
        { name: 'N∆∞·ªõc ng·ªçt', qty: 1, price: 10000 }
      ],
      total: 60000
    };

    return await this.printBill(testBill);
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR
   */
  updateVietQRConfig(config: Partial<VietQRConfig>): void {
    this.vietQRConfig.acqId = config.acqId ?? this.vietQRConfig.acqId;
    this.vietQRConfig.accountNo = config.accountNo ?? this.vietQRConfig.accountNo;
    this.vietQRConfig.accountName = config.accountName ?? this.vietQRConfig.accountName;
    
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh VietQR:', this.vietQRConfig);
  }

  /**
   * C·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in
   */
  updatePrinterConfig(config: Partial<PrinterConfig>): void {
    this.printerConfig.type = config.type ?? this.printerConfig.type;
    this.printerConfig.device = config.device ?? this.printerConfig.device;
    this.printerConfig.ip = config.ip ?? this.printerConfig.ip;
    this.printerConfig.port = config.port ?? this.printerConfig.port;
    
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh m√°y in:', this.printerConfig);
  }
}
