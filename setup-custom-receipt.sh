#!/bin/bash

# Script setup h√≥a ƒë∆°n t√πy ch·ªânh v·ªõi QR code
# Usage: ./setup-custom-receipt.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

echo "üñ®Ô∏è Setup h√≥a ƒë∆°n t√πy ch·ªânh v·ªõi QR code..."
echo "================================================"

# Go to backend directory
cd apps/backend

# Install required packages
print_status "C√†i ƒë·∫∑t packages c·∫ßn thi·∫øt..."
npm install qrcode express cors

# Create enhanced printer service
print_status "T·∫°o enhanced printer service..."

cat > src/services/enhanced-printer.service.ts << 'EOF'
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../common/prisma/prisma.service';
import * as QRCode from 'qrcode';

@Injectable()
export class EnhancedPrinterService {
  constructor(private prisma: PrismaService) {}

  // C·∫•u h√¨nh h√≥a ƒë∆°n c√≥ th·ªÉ t√πy ch·ªânh
  private receiptConfig = {
    store: {
      name: 'NH√Ä T√îI ERP',
      subtitle: 'H·ªá th·ªëng qu·∫£n l√Ω qu√°n ƒÉn',
      address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
      phone: '0123 456 789',
      email: 'info@nhatoi.com',
      website: 'www.nhatoi.com',
      taxCode: '0123456789'
    },
    printer: {
      width: 48,
      encoding: 'cp1252'
    },
    qrCode: {
      enabled: true,
      size: 200,
      margin: 2
    },
    footer: {
      showQR: true,
      showWebsite: true,
      showTaxCode: true,
      showThankYou: true,
      customMessage: 'C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!'
    }
  };

  // ESC/POS Commands
  private readonly ESC = '\x1B';
  private readonly GS = '\x1D';
  private readonly LF = '\x0A';

  private readonly ESC_POS = {
    RESET: this.ESC + '@',
    BOLD_ON: this.ESC + 'E' + '\x01',
    BOLD_OFF: this.ESC + 'E' + '\x00',
    ALIGN_CENTER: this.ESC + 'a' + '\x01',
    ALIGN_LEFT: this.ESC + 'a' + '\x00',
    FONT_A: this.ESC + 'M' + '\x00',
    FONT_B: this.ESC + 'M' + '\x01',
    CUT_PAPER: this.GS + 'V' + '\x00',
    FEED_PAPER: this.LF + this.LF + this.LF,
  };

  // T·∫°o QR code
  async generateQRCode(orderData: any): Promise<string | null> {
    try {
      const qrData = {
        orderNumber: orderData.orderNumber,
        date: new Date().toISOString(),
        total: orderData.total,
        store: this.receiptConfig.store.name,
        website: this.receiptConfig.store.website
      };
      
      const qrString = JSON.stringify(qrData);
      const qrCode = await QRCode.toString(qrString, {
        type: 'svg',
        width: this.receiptConfig.qrCode.size,
        margin: this.receiptConfig.qrCode.margin
      });
      
      return qrCode;
    } catch (error) {
      console.error('QR Code generation error:', error);
      return null;
    }
  }

  // T·∫°o h√≥a ƒë∆°n t√πy ch·ªânh
  async generateCustomReceipt(orderId: string, customConfig: any = {}): Promise<string> {
    const order = await this.prisma.order.findUnique({
      where: { id: orderId },
      include: {
        table: true,
        user: true,
        customer: true,
        orderItems: {
          include: {
            menu: true
          }
        },
        payments: true
      }
    });

    if (!order) {
      throw new Error('Order not found');
    }

    const config = { ...this.receiptConfig, ...customConfig };
    let receipt = '';
    
    // Reset printer
    receipt += this.ESC_POS.RESET;
    
    // Header - Store info
    receipt += this.ESC_POS.ALIGN_CENTER;
    receipt += this.ESC_POS.BOLD_ON;
    receipt += this.ESC_POS.FONT_B;
    receipt += `${config.store.name}\n`;
    receipt += `${config.store.subtitle}\n`;
    receipt += '========================\n';
    
    // Store details
    receipt += this.ESC_POS.BOLD_OFF;
    receipt += this.ESC_POS.FONT_A;
    if (config.store.address) {
      receipt += `${config.store.address}\n`;
    }
    if (config.store.phone) {
      receipt += `ƒêT: ${config.store.phone}\n`;
    }
    if (config.store.email) {
      receipt += `Email: ${config.store.email}\n`;
    }
    if (config.store.website) {
      receipt += `Web: ${config.store.website}\n`;
    }
    if (config.store.taxCode) {
      receipt += `MST: ${config.store.taxCode}\n`;
    }
    receipt += '========================\n';
    
    // Order info
    receipt += this.ESC_POS.ALIGN_LEFT;
    receipt += `H√≥a ƒë∆°n: ${order.orderNumber}\n`;
    receipt += `Ng√†y: ${new Date().toLocaleString('vi-VN')}\n`;
    receipt += `B√†n: ${order.table.name}\n`;
    receipt += `Thu ng√¢n: ${order.user.firstName} ${order.user.lastName}\n`;
    receipt += '------------------------\n';
    
    // Items
    receipt += 'M√ìN ƒÇN                    SL   GI√Å\n';
    receipt += '------------------------\n';
    
    order.orderItems.forEach(item => {
      const name = item.menu.name.substring(0, 20).padEnd(20);
      const qty = item.quantity.toString().padStart(2);
      const price = item.price.toLocaleString('vi-VN').padStart(8);
      receipt += `${name} ${qty} ${price}\n`;
    });
    
    // Totals
    receipt += '------------------------\n';
    receipt += `T·∫°m t√≠nh: ${order.subtotal.toLocaleString('vi-VN')} VNƒê\n`;
    if (order.tax > 0) {
      receipt += `Thu·∫ø VAT: ${order.tax.toLocaleString('vi-VN')} VNƒê\n`;
    }
    if (order.discount > 0) {
      receipt += `Gi·∫£m gi√°: -${order.discount.toLocaleString('vi-VN')} VNƒê\n`;
    }
    receipt += '------------------------\n';
    receipt += this.ESC_POS.BOLD_ON;
    receipt += `T·ªîNG C·ªòNG: ${order.total.toLocaleString('vi-VN')} VNƒê\n`;
    receipt += this.ESC_POS.BOLD_OFF;
    
    // Payment info
    if (order.payments && order.payments.length > 0) {
      receipt += `Thanh to√°n: ${order.payments[0].method}\n`;
    }
    if (order.customer) {
      receipt += `Kh√°ch h√†ng: ${order.customer.name}\n`;
    }
    
    // Footer
    receipt += this.ESC_POS.ALIGN_CENTER;
    if (config.footer.showThankYou) {
      receipt += 'C·∫£m ∆°n qu√Ω kh√°ch!\n';
    }
    if (config.footer.customMessage) {
      receipt += `${config.footer.customMessage}\n`;
    }
    
    // QR Code info
    if (config.footer.showQR && config.qrCode.enabled) {
      receipt += '------------------------\n';
      receipt += 'Qu√©t m√£ QR ƒë·ªÉ xem chi ti·∫øt:\n';
    }
    
    // Feed and cut
    receipt += this.ESC_POS.FEED_PAPER;
    receipt += this.ESC_POS.CUT_PAPER;
    
    return receipt;
  }

  // C·∫≠p nh·∫≠t c·∫•u h√¨nh h√≥a ƒë∆°n
  updateConfig(newConfig: any) {
    this.receiptConfig = { ...this.receiptConfig, ...newConfig };
  }

  // L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
  getConfig() {
    return this.receiptConfig;
  }
}
EOF

# Create enhanced printer controller
print_status "T·∫°o enhanced printer controller..."

cat > src/modules/printer/enhanced-printer.controller.ts << 'EOF'
import { Controller, Post, Get, Body, Res } from '@nestjs/common';
import { Response } from 'express';
import { EnhancedPrinterService } from '../../services/enhanced-printer.service';

@Controller('printer/enhanced')
export class EnhancedPrinterController {
  constructor(private enhancedPrinterService: EnhancedPrinterService) {}

  @Post('receipt')
  async printCustomReceipt(@Body() body: { orderId: string; customConfig?: any }, @Res() res: Response) {
    try {
      const receipt = await this.enhancedPrinterService.generateCustomReceipt(body.orderId, body.customConfig);
      
      res.set({
        'Content-Type': 'text/plain; charset=cp1252',
        'Content-Length': receipt.length,
        'X-Receipt-Type': 'enhanced',
        'X-Printer-Model': 'XP-80C'
      });
      
      res.send(receipt);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  @Post('qr')
  async generateQRCode(@Body() body: { orderId: string }, @Res() res: Response) {
    try {
      const order = await this.enhancedPrinterService['prisma'].order.findUnique({
        where: { id: body.orderId },
        include: {
          table: true,
          user: true,
          orderItems: {
            include: {
              menu: true
            }
          }
        }
      });

      if (!order) {
        return res.status(404).json({ error: 'Order not found' });
      }

      const orderData = {
        orderNumber: order.orderNumber,
        tableName: order.table.name,
        cashierName: order.user.firstName + ' ' + order.user.lastName,
        items: order.orderItems.map(item => ({
          name: item.menu.name,
          quantity: item.quantity,
          price: item.price
        })),
        total: order.total
      };

      const qrCode = await this.enhancedPrinterService.generateQRCode(orderData);
      
      if (qrCode) {
        res.set({
          'Content-Type': 'image/svg+xml',
          'Content-Length': qrCode.length
        });
        res.send(qrCode);
      } else {
        res.status(500).json({ error: 'Failed to generate QR code' });
      }
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  @Post('config')
  updateConfig(@Body() body: any) {
    this.enhancedPrinterService.updateConfig(body);
    return { success: true, message: 'Configuration updated' };
  }

  @Get('config')
  getConfig() {
    return { success: true, config: this.enhancedPrinterService.getConfig() };
  }

  @Get('test')
  async testPrint(@Res() res: Response) {
    try {
      const testData = {
        orderNumber: 'HD001',
        tableName: 'B√†n 1',
        cashierName: 'Thu ng√¢n A',
        customerName: 'Nguy·ªÖn VƒÉn A',
        paymentMethod: 'Ti·ªÅn m·∫∑t',
        items: [
          { name: 'Ph·ªü B√≤', quantity: 2, price: 45000 },
          { name: 'B√∫n B√≤ Hu·∫ø', quantity: 1, price: 50000 },
          { name: 'N∆∞·ªõc Cam', quantity: 2, price: 15000 }
        ],
        subtotal: 155000,
        tax: 15500,
        discount: 5000,
        total: 165500
      };

      let receipt = '';
      receipt += 'NH√Ä T√îI ERP\n';
      receipt += 'H·ªá th·ªëng qu·∫£n l√Ω qu√°n ƒÉn\n';
      receipt += '========================\n\n';
      receipt += `H√≥a ƒë∆°n: ${testData.orderNumber}\n`;
      receipt += `Ng√†y: ${new Date().toLocaleString('vi-VN')}\n`;
      receipt += `B√†n: ${testData.tableName}\n`;
      receipt += `Thu ng√¢n: ${testData.cashierName}\n`;
      receipt += '------------------------\n\n';
      receipt += 'M√ìN ƒÇN                    SL   GI√Å\n';
      receipt += '------------------------\n';
      
      testData.items.forEach(item => {
        const name = item.name.substring(0, 20).padEnd(20);
        const qty = item.quantity.toString().padStart(2);
        const price = item.price.toLocaleString('vi-VN').padStart(8);
        receipt += `${name} ${qty} ${price}\n`;
      });
      
      receipt += '------------------------\n';
      receipt += `T·∫°m t√≠nh: ${testData.subtotal.toLocaleString('vi-VN')} VNƒê\n`;
      receipt += `Thu·∫ø VAT: ${testData.tax.toLocaleString('vi-VN')} VNƒê\n`;
      receipt += `Gi·∫£m gi√°: -${testData.discount.toLocaleString('vi-VN')} VNƒê\n`;
      receipt += '------------------------\n';
      receipt += `T·ªîNG C·ªòNG: ${testData.total.toLocaleString('vi-VN')} VNƒê\n\n`;
      receipt += 'C·∫£m ∆°n qu√Ω kh√°ch!\n';
      receipt += 'Qu√©t m√£ QR ƒë·ªÉ xem chi ti·∫øt:\n';
      
      res.set({
        'Content-Type': 'text/plain; charset=utf-8',
        'Content-Length': receipt.length,
        'X-Receipt-Type': 'enhanced-test',
        'X-Printer-Model': 'XP-80C'
      });
      
      res.send(receipt);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
}
EOF

# Update printer module
print_status "C·∫≠p nh·∫≠t printer module..."

cat > src/modules/printer/printer.module.ts << 'EOF'
import { Module } from '@nestjs/common';
import { PrinterController } from './printer.controller';
import { EnhancedPrinterController } from './enhanced-printer.controller';
import { PrinterService } from './printer.service';
import { EnhancedPrinterService } from '../../services/enhanced-printer.service';
import { PrismaModule } from '../../common/prisma/prisma.module';

@Module({
  imports: [PrismaModule],
  controllers: [PrinterController, EnhancedPrinterController],
  providers: [PrinterService, EnhancedPrinterService],
  exports: [PrinterService, EnhancedPrinterService]
})
export class PrinterModule {}
EOF

# Create test script
print_status "T·∫°o test script..."

cat > test-enhanced-receipt.js << 'EOF'
const { PrismaClient } = require('@prisma/client');
const QRCode = require('qrcode');

const prisma = new PrismaClient();

async function testEnhancedReceipt() {
  try {
    console.log('üßæ Testing enhanced receipt with QR code...');
    
    // Sample order data
    const orderData = {
      orderNumber: 'HD001',
      tableName: 'B√†n 1',
      cashierName: 'Thu ng√¢n A',
      customerName: 'Nguy·ªÖn VƒÉn A',
      paymentMethod: 'Ti·ªÅn m·∫∑t',
      items: [
        { name: 'Ph·ªü B√≤', quantity: 2, price: 45000 },
        { name: 'B√∫n B√≤ Hu·∫ø', quantity: 1, price: 50000 },
        { name: 'N∆∞·ªõc Cam', quantity: 2, price: 15000 }
      ],
      subtotal: 155000,
      tax: 15500,
      discount: 5000,
      total: 165500
    };
    
    // Generate QR code
    const qrData = {
      orderNumber: orderData.orderNumber,
      date: new Date().toISOString(),
      total: orderData.total,
      store: 'NH√Ä T√îI ERP',
      website: 'www.nhatoi.com'
    };
    
    const qrString = JSON.stringify(qrData);
    const qrCode = await QRCode.toString(qrString, {
      type: 'svg',
      width: 200,
      margin: 2
    });
    
    // Generate enhanced receipt
    let receipt = '';
    receipt += 'NH√Ä T√îI ERP\n';
    receipt += 'H·ªá th·ªëng qu·∫£n l√Ω qu√°n ƒÉn\n';
    receipt += '========================\n';
    receipt += '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\n';
    receipt += 'ƒêT: 0123 456 789\n';
    receipt += 'Email: info@nhatoi.com\n';
    receipt += 'Web: www.nhatoi.com\n';
    receipt += 'MST: 0123456789\n';
    receipt += '========================\n\n';
    receipt += `H√≥a ƒë∆°n: ${orderData.orderNumber}\n`;
    receipt += `Ng√†y: ${new Date().toLocaleString('vi-VN')}\n`;
    receipt += `B√†n: ${orderData.tableName}\n`;
    receipt += `Thu ng√¢n: ${orderData.cashierName}\n`;
    receipt += '------------------------\n\n';
    receipt += 'M√ìN ƒÇN                    SL   GI√Å\n';
    receipt += '------------------------\n';
    
    orderData.items.forEach(item => {
      const name = item.name.substring(0, 20).padEnd(20);
      const qty = item.quantity.toString().padStart(2);
      const price = item.price.toLocaleString('vi-VN').padStart(8);
      receipt += `${name} ${qty} ${price}\n`;
    });
    
    receipt += '------------------------\n';
    receipt += `T·∫°m t√≠nh: ${orderData.subtotal.toLocaleString('vi-VN')} VNƒê\n`;
    receipt += `Thu·∫ø VAT: ${orderData.tax.toLocaleString('vi-VN')} VNƒê\n`;
    receipt += `Gi·∫£m gi√°: -${orderData.discount.toLocaleString('vi-VN')} VNƒê\n`;
    receipt += '------------------------\n';
    receipt += `T·ªîNG C·ªòNG: ${orderData.total.toLocaleString('vi-VN')} VNƒê\n\n`;
    receipt += `Thanh to√°n: ${orderData.paymentMethod}\n`;
    receipt += `Kh√°ch h√†ng: ${orderData.customerName}\n\n`;
    receipt += 'C·∫£m ∆°n qu√Ω kh√°ch!\n';
    receipt += 'C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!\n';
    receipt += '------------------------\n';
    receipt += 'Qu√©t m√£ QR ƒë·ªÉ xem chi ti·∫øt:\n';
    
    // Save to files
    const fs = require('fs');
    fs.writeFileSync('enhanced-receipt.txt', receipt, 'utf8');
    fs.writeFileSync('receipt-qr.svg', qrCode, 'utf8');
    fs.writeFileSync('receipt-data.json', JSON.stringify(orderData, null, 2), 'utf8');
    
    console.log('‚úÖ Enhanced receipt generated!');
    console.log('Receipt length:', receipt.length, 'bytes');
    console.log('QR Code generated:', qrCode ? 'Yes' : 'No');
    console.log('');
    console.log('Files saved:');
    console.log('- enhanced-receipt.txt (Enhanced receipt)');
    console.log('- receipt-qr.svg (QR code)');
    console.log('- receipt-data.json (Order data)');
    
    console.log('\nüìã Receipt preview:');
    console.log(receipt);
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testEnhancedReceipt();
EOF

# Run test
print_status "Ch·∫°y test enhanced receipt..."
node test-enhanced-receipt.js

# Clean up
rm test-enhanced-receipt.js

print_status "‚úÖ Ho√†n th√†nh setup h√≥a ƒë∆°n t√πy ch·ªânh v·ªõi QR code!"
echo ""
print_info "üéâ T√≠nh nƒÉng ƒë√£ ƒë∆∞·ª£c th√™m:"
echo "‚Ä¢ QR code cho h√≥a ƒë∆°n"
echo "‚Ä¢ T√πy ch·ªânh th√¥ng tin c·ª≠a h√†ng"
echo "‚Ä¢ T√πy ch·ªânh footer v√† message"
echo "‚Ä¢ API endpoints ƒë·ªÉ c·∫≠p nh·∫≠t c·∫•u h√¨nh"
echo "‚Ä¢ H·ªó tr·ª£ thu·∫ø VAT v√† gi·∫£m gi√°"
echo ""
print_info "üìã API endpoints m·ªõi:"
echo "‚Ä¢ POST /api/printer/enhanced/receipt - In h√≥a ƒë∆°n t√πy ch·ªânh"
echo "‚Ä¢ POST /api/printer/enhanced/qr - T·∫°o QR code"
echo "‚Ä¢ POST /api/printer/enhanced/config - C·∫≠p nh·∫≠t c·∫•u h√¨nh"
echo "‚Ä¢ GET /api/printer/enhanced/config - L·∫•y c·∫•u h√¨nh"
echo "‚Ä¢ GET /api/printer/enhanced/test - Test h√≥a ƒë∆°n"
echo ""
print_info "üîß C√°ch s·ª≠ d·ª•ng:"
echo "1. C·∫≠p nh·∫≠t th√¥ng tin c·ª≠a h√†ng qua API"
echo "2. T√πy ch·ªânh footer v√† message"
echo "3. In h√≥a ƒë∆°n v·ªõi QR code"
echo "4. Ki·ªÉm tra file enhanced-receipt.txt"
echo ""
print_warning "‚ö†Ô∏è L∆∞u √Ω:"
echo "‚Ä¢ QR code ch·ª©a th√¥ng tin h√≥a ƒë∆°n"
echo "‚Ä¢ C√≥ th·ªÉ t√πy ch·ªânh ho√†n to√†n th√¥ng tin hi·ªÉn th·ªã"
echo "‚Ä¢ H·ªó tr·ª£ thu·∫ø VAT v√† gi·∫£m gi√°"
echo "‚Ä¢ T∆∞∆°ng th√≠ch v·ªõi m√°y in XP-80C"
