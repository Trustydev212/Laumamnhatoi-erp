#!/bin/bash

# Script s·ª≠a c·∫•u h√¨nh package.json cho Turbo monorepo
# Usage: ./fix-package-scripts.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

echo "üîß S·ª≠a c·∫•u h√¨nh package.json cho Turbo monorepo..."
echo "================================================"

# Check if we're in the right directory
if [ ! -f "apps/backend/package.json" ]; then
    print_error "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c project. Vui l√≤ng ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc"
    exit 1
fi

# Fix backend package.json
print_status "S·ª≠a c·∫•u h√¨nh backend package.json..."

# Backup original file
cp apps/backend/package.json apps/backend/package.json.backup

# Update start script to use built file
sed -i 's/"start": "nest start"/"start": "node dist\/main"/g' apps/backend/package.json

print_status "‚úÖ ƒê√£ s·ª≠a backend package.json"

# Check if frontend needs fixing
print_status "Ki·ªÉm tra frontend package.json..."
if grep -q '"start": "next start"' apps/frontend/package.json; then
    print_status "‚úÖ Frontend package.json ƒë√£ ƒë√∫ng"
else
    print_warning "Frontend package.json c·∫ßn ki·ªÉm tra"
fi

# Test build
print_status "Th·ª≠ build backend..."
cd apps/backend
if npm run build; then
    print_status "‚úÖ Backend build th√†nh c√¥ng!"
else
    print_error "‚ùå Backend build th·∫•t b·∫°i"
    exit 1
fi

cd ../..

print_status "Ho√†n th√†nh s·ª≠a c·∫•u h√¨nh package.json!"
echo ""
print_info "B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:"
echo "1. npm run build (build to√†n b·ªô project)"
echo "2. npm run start (ch·∫°y production)"
echo "3. npm run dev (ch·∫°y development)"
